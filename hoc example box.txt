import { React, useState, useEffect } from "react";
import { makeStyles } from "@material-ui/core/styles";
import { Button, TextField, Grid, Box } from "@material-ui/core";
import axios from "axios";
import DialogBox from "../Hoc/Dialog";
import Tags from "./Tags";
import Contents from "./Contents";

const useStyles = makeStyles((theme) => ({
  root: {
    "& > *": {
      margin: theme.spacing(1),
      width: "25ch",
    },
  },
  form: {
    display: "flex",
    flexDirection: "column",
    margin: "auto",
    width: "fit-content",
  },
  formControl: {
    marginTop: theme.spacing(2),
    minWidth: 120,
  },
  formControlLabel: {
    marginTop: theme.spacing(1),
  },
  Step: {
    width: "100%",
  },
  backButton: {
    marginRight: theme.spacing(1),
  },
  instructions: {
    marginTop: theme.spacing(1),
    marginBottom: theme.spacing(1),
  },
}));

const Form = (props) => {
  const classes = useStyles();

  const { errors, values, setValues } = props;

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setValues((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  return (
    <div>
      <form className={classes.root} noValidate autoComplete="off">
        <TextField
          id="standard-basic"
          label="Title"
          onChange={handleInputChange}
          value={values.title}
          name="title"
          required
          error={errors && values?.title?.length === 0}
        />
        <TextField
          id="standard-basic"
          label="Summary"
          onChange={handleInputChange}
          value={values.summary}
          name="summary"
          required
          error={errors && values?.summary.length === 0}
        />
      </form>
    </div>
  );
};

function AddBlog(props) {
  const { handleClose, open, setTypes, setId, getdata } = props;
  const classes = useStyles();
  const [activeStep, setActiveStep] = useState(0);
  const [image, setImage] = useState(null);
  const [tag, setTag] = useState([]);
  const [test, setTest] = useState([]);
  const userId = localStorage.getItem("user_id");
  const [values, setValues] = useState({
    userId: userId,
    title: "",
    summary: "",
    categoryId: tag,
    Image: image,
    content: "",
  });
  const [errors, setErrors] = useState(false);
  const [category, setCategory] = useState(null);
  const steps = getSteps();

  function getSteps() {
    return ["Blog Details", "Tag Details", "Content Details"];
  }

  const handleNext = () => {
    if (activeStep === 0) {
      if (!values.title || !values.summary) {
        setErrors(true);
      } else {
        setActiveStep((prevActivestep) => prevActivestep + 1);
      }
    } else if (activeStep === 1) {
      if (tag?.length === 0) {
        setErrors(true);
      } else {
        setErrors(false);
        setActiveStep((prevActivestep) => prevActivestep + 1);
      }
    } else if (activeStep === 2) {
      console.log(tag);
      if (!values.content) {
        setErrors(true);
       } else {
        axios
          .post(`http://localhost:9000/app/blog/create`, {
            userId: userId,
            title: values.title,
            summary: values.summary,
            categoryId: tag,
            Image: image,
            content: values.content,
          })
          .then(() => {
            // setTypes(true);
            getdata();
          });
        // axios.post(`http://localhost:9000/app/tag/create`, tag).then(() => {
        //   // setTypes(true);
        //   getdata();
        // });
        setValues({
          userId: userId,
          title: "",
          summary: "",
          categoryId: "",
          Image: "",
          content: "",
        });
        handleClose(true);
        setActiveStep(0);
      }
    }
  };
  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  return (
    <div>
      <DialogBox
        activeStep={activeStep}
        steps={steps}
        open={open}
        title={"Add Blog"}
        handleCloseDialog={handleClose}
      >
        <Grid>
          <>
            {activeStep === 0 && (
              <Form errors={errors} values={values} setValues={setValues} />
            )}
            {activeStep === 1 && (
              <Tags
                errors={errors}
                test={test}
                setTest={setTest}
                setCategory={setCategory}
                tag={tag}
                setTag={setTag}
              />
            )}
            {activeStep === 2 && (
              <Contents
                errors={errors}
                values={values}
                setValues={setValues}
                setImage={setImage}
              />
            )}
          </>
        </Grid>
        <Grid container style={{ marginTop: "7px" }}>
          <Grid item xs={11} style={{ margin: "auto" }}>
            <Grid container spacing={3}>
              <Box textAlign={"right"}>
                {activeStep === 0 ? (
                  ""
                ) : (
                  <Button
                    variant="contained"
                    color="primary"
                    className={classes.nextStep}
                    onClick={handleBack}
                  >
                    {" "}
                    back{" "}
                  </Button>
                )}
                <Button
                  variant="contained"
                  color="primary"
                  className={classes.nextStep}
                  onClick={handleNext}
                >
                  {" "}
                  {activeStep === steps.length - 1 ? "Submit" : "Next"}
                </Button>
              </Box>
            </Grid>
          </Grid>
        </Grid>
      </DialogBox>
    </div>
  );
}

export default AddBlog;


------------------------------Dialog.js---------------------------

import { makeStyles, withStyles } from "@material-ui/core/styles";
import {
  Dialog,
  DialogContent,
  Grid,
  IconButton,
  Typography,
  Stepper,
  Step,
  StepLabel,
} from "@material-ui/core";
import CloseIcon from "@material-ui/icons/Close";
import MuiDialogTitle from "@material-ui/core/DialogTitle";

const useStyles = makeStyles((theme) => ({
  root: {
    margin: 0,
    padding: theme.spacing(2),
  },
  dialogStyle: {
    color: "#777777",
    // height: 'calc(100vh - 50px)'
  },
  closeButton: {
    position: "absolute",
    right: theme.spacing(1),
    top: theme.spacing(1),
    color: "#558de8",
  },
}));

export default function DialogBox(props) {
  const classes = useStyles();
  const DialogTitle = withStyles(useStyles)((props) => {
    const { children, classes, onClose, closeButton, ...other } = props;
    return (
      <MuiDialogTitle disableTypography className={classes.root} {...other}>
        <Grid container>
          <Grid item xs={11}>
            <Typography variant="h4" style={{ margin: "1%" }}>
              {children}
            </Typography>
          </Grid>
          <Grid item xs={1}>
            {onClose && closeButton ? (
              <IconButton
                aria-label="close"
                style={{ float: "right" }}
                className={classes.closeButton}
                onClick={onClose}
              >
                <CloseIcon />
              </IconButton>
            ) : null}
          </Grid>
        </Grid>
      </MuiDialogTitle>
    );
  });

  const { steps, title, children, activeStep, handleCloseDialog, srceenWidth } =
    props;

  const closeButton =
    props.closeButton === undefined ? true : props.closeButton;

  return (
    <div>
      <Dialog
        classes={{ paper: classes.dialogStyle }}
        open={props.open}
        onClose={() => handleCloseDialog()}
        maxWidth={srceenWidth ? srceenWidth : "md"}
        fullWidth={true}
      >
        <DialogTitle
          onClose={() => handleCloseDialog()}
          closeButton={closeButton}
        >
          {title}
        </DialogTitle>
        <DialogContent dividers>
          <Grid container>
            {steps && (
              <Grid item xs={12}>
                <Stepper activeStep={activeStep} alternativeLabel>
                  {steps.map((label) => (
                    <Step key={label}>
                      <StepLabel>{label}</StepLabel>
                    </Step>
                  ))}
                </Stepper>
              </Grid>
            )}

            {children}
          </Grid>
        </DialogContent>
      </Dialog>
    </div>
  );
}