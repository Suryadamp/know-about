-------------------------app.js-------------------------------------------
import React, { useEffect, useState } from "react";
import "./App.css";
// import Blogspot from "./Blogspot";
// import Real from "./Real";
// import Pos from "./pos";
// import Login from "./Login";

import { Route, Routes } from "react-router-dom";
import axios from "axios";
// import Add from "./Add";
import { Provider } from 'react-redux';

import store from './redux/store';

import Blogspot from './Blogspot';


// export const Context = React.createContext();

function App() {
  // const [data, setData] = useState([]);

  
  
//   useEffect(() => {
//     getData();
      
//   }, []);

// const getData=()=>{
  
//   axios.get(`http://localhost:8080/api/users/blogs`).then((res) => {
    
//     setData(res.data);
//   })

// }




// data.sort((a, b) => (a.individualBlogId > b.individualBlogId) ? -1 : 1)


  return (
    <div className="App">
    <Provider store={store}>
      {/* <Context.Provider value={[data, setData]}> */}
        <Routes>
          {/* <Route exact path="/" element={<Blogspot getData={getData} />} />  */}
          <Route exact path="/" element={<Blogspot  />} /> 
          {/* <Route path="/Real" element={<Real getData={getData} />} /> */}
          {/* <Route path="/Real" element={<Real  />} /> */}
          {/* <Route path="/Add"element={<Add  />}/> */}
          {/* <Route path="/login" element={<Login />} /> */}
          {/* <Route path="/pos/:individualBlogId" element={<Pos getData={getData} />} /> */}
          {/* <Route path="/pos/:individualBlogId" element={<Pos  />} /> */}
          
        </Routes>
        </Provider>
      {/* </Context.Provider> */}
    
     
    </div>
  );
}

export default App;


----------------------------------redux/data/dataActions-----------------------------------
import axios from 'axios'
import {
  FETCH_USERS_REQUEST,
  FETCH_USERS_SUCCESS,
  FETCH_USERS_FAILURE
} from './dataTypes'

export const fetchUsers = () => {
  return (dispatch) => {
    dispatch(fetchUsersRequest())
    axios
      .get(`http://localhost:8080/api/users/blogs`)
      .then(response => {
        // response.data is the users
        const data = response.data
        console.log(data)
        dispatch(fetchUsersSuccess(data))
      })
      .catch(error => {
        // error.message is the error message
        dispatch(fetchUsersFailure(error.message))
      })
  }
}

export const fetchUsersRequest = () => {
  return {
    type: FETCH_USERS_REQUEST
  }
}

export const fetchUsersSuccess = data => {
  return {
    type: FETCH_USERS_SUCCESS,
    payload: data
  }
}

export const fetchUsersFailure = error => {
  return {
    type: FETCH_USERS_FAILURE,
    payload: error
  }
}

---------------------------------redux/data/dataReducer-------------------------------------

import {
    FETCH_USERS_REQUEST,
    FETCH_USERS_SUCCESS,
    FETCH_USERS_FAILURE
  } from './dataTypes'
  
  const initialState = {
    loading: false,
    data: [],
    error: ''
  }
  
  const reducer = (state = initialState, action) => {
    switch (action.type) {
      case FETCH_USERS_REQUEST:
        return {
          ...state,
          loading: true
        }
      case FETCH_USERS_SUCCESS:
        return {
          loading: false,
          data: action.payload,
          error: ''
        }
      case FETCH_USERS_FAILURE:
        return {
          loading: false,
          users: [],
          error: action.payload
        }
      default: return state
    }
  }
  
  export default reducer
  --------------------------------------redux/data/dataTypes-------------------------
  export const FETCH_USERS_REQUEST = 'FETCH_USERS_REQUEST'
export const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS'
export const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE'
---------------------------redux/store---------------------------------
import { createStore, applyMiddleware } from 'redux'
import { composeWithDevTools } from 'redux-devtools-extension'
import logger from 'redux-logger'
import thunk from 'redux-thunk'

import rootReducer from './rootReducer'

const store = createStore(
  rootReducer,
  composeWithDevTools(applyMiddleware(logger, thunk))
)

export default store
-------------------------------redux/rootReducer--------------------
import { combineReducers } from 'redux';

import dataReducer from './data/dataReducer';

const rootReducer = combineReducers({
  user: dataReducer,
});

export default rootReducer;


---------------------------redux/index.js