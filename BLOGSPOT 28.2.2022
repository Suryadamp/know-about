-----------------------App.js----------------------
import React, { useEffect, useState } from "react";
import "./App.css";
import Blogspot from "./Blogspot";
import Real from "./Real";
import Pos from "./pos";
import Login from "./Login";
import { Route, Routes } from "react-router-dom";
import axios from "axios";
import Add from "./Add";

export const Context = React.createContext();

function App() {
  const [data, setData] = useState([]);

  
  
  useEffect(() => {
    getData();
      
  }, []);

const getData=()=>{
  
  axios.get(`http://localhost:8080/api/users/blogs`).then((res) => {
    
    setData(res.data);
  })

}




data.sort((a, b) => (a.individualBlogId > b.individualBlogId) ? -1 : 1)


  return (
    <div className="App">
      <Context.Provider value={[data, setData]}>
        <Routes>
          <Route exact path="/" element={<Blogspot getData={getData} />} /> 
          
          <Route path="/Real" element={<Real getData={getData} />} />
          <Route path="/Add"element={<Add  />}/>
          <Route path="/login" element={<Login />} />
          <Route path="/pos/:individualBlogId" element={<Pos getData={getData} />} />
        </Routes>
      </Context.Provider>
     
    </div>
  );
}

export default App;


----------------------------------BlogSpot.js----------------------------
import React from "react";
import { useEffect, useState, useContext } from "react";
import Login from "./Login";
import Real from "./Real";
import Add from "./Add";
import Cartoon from "./Cartoon.jpg";

import { AppBar, Button, Toolbar, Typography, Card,Grid } from "@material-ui/core";
import { makeStyles } from "@material-ui/core";
import { Context } from "./App";

// import Register from "./Register";

//import {Stack} from '@material-ui/St';


const useStyles = makeStyles((theme) => ({
  root: {
    paddingBottom: theme.spacing(10),
  },
}));
const Blogspot = ({getData}) => {
  const [data, setData] = useContext(Context);
  const[error,setError]=useState(false)
  
  const classes = useStyles();
  const [blog, setBlog] = useState([]);
  const [open, setOpen] = useState(false);
  const [add, setAdd] = useState(false);
  const [submit, setSubmit] = useState({});
  const [reg, setReg] = useState(false);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const handleAdd = () => {
    setAdd(true);
  };
  const handleAddClose = () => {
    setAdd(false);
  };
  const handleReg = () => {
    setReg(true);
  };
  const handleRegClose = () => {
    setReg(false);
  };

  const setAdded = (addData) => {
    if (addData) {
      setData([...data, addData]);
    }
  };

  return (
    <div style={{backgroundImage: `url(${Cartoon})`, backgroundRepeat: 'no-repeat'  ,backgroundSize:"2500px"}} >
      <AppBar position="static">
        <Toolbar>
          <Typography
            variant="h2"
            
            style={{ marginLeft: "650px" }}
          >
            Home
          </Typography>
          <Button
              color="secondary"
              variant="contained"
            style={{ marginLeft: "480px" }}
            color="secondary"
            onClick={handleClickOpen}
          >
            Login
          </Button>
          <Button
              color="secondary"
              variant="contained"
            style={{ marginLeft: "20px"}}
            onClick={handleReg}
          >
            Register
          </Button>
        </Toolbar>
      </AppBar>

      <Button

        variant="contained"
        color="secondary"
        style={{ marginLeft: "1350px",marginBlock:"10px" }}
        onClick={handleAdd}
      >
        Add Blogs 
      </Button>
      <Login handleClose={handleClose} open={open} error={error} setError={setError}/>
       <Real  />

      <Add
        handleAddClose={handleAddClose}
        add={add}
        setSubmit={setSubmit}
        setAdded={setAdded}
        getData={getData}
        error={error}
        setError={setError}
      />
      {/* <Register reg={reg} handleRegClose={handleRegClose} /> */}
   
  
    

    </div>
  );
};

export default Blogspot;


-----------------------------------Real.js------------------------\
import React from "react";
import { useEffect, useState, useContext } from "react";
import Login from "./Login";
import Real from "./Real";
import Add from "./Add";
import Cartoon from "./Cartoon.jpg";

import { AppBar, Button, Toolbar, Typography, Card,Grid } from "@material-ui/core";
import { makeStyles } from "@material-ui/core";
import { Context } from "./App";

// import Register from "./Register";

//import {Stack} from '@material-ui/St';


const useStyles = makeStyles((theme) => ({
  root: {
    paddingBottom: theme.spacing(10),
  },
}));
const Blogspot = ({getData}) => {
  const [data, setData] = useContext(Context);
  const[error,setError]=useState(false)
  
  const classes = useStyles();
  const [blog, setBlog] = useState([]);
  const [open, setOpen] = useState(false);
  const [add, setAdd] = useState(false);
  const [submit, setSubmit] = useState({});
  const [reg, setReg] = useState(false);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const handleAdd = () => {
    setAdd(true);
  };
  const handleAddClose = () => {
    setAdd(false);
  };
  const handleReg = () => {
    setReg(true);
  };
  const handleRegClose = () => {
    setReg(false);
  };

  const setAdded = (addData) => {
    if (addData) {
      setData([...data, addData]);
    }
  };

  return (
    <div style={{backgroundImage: `url(${Cartoon})`, backgroundRepeat: 'no-repeat'  ,backgroundSize:"2500px"}} >
      <AppBar position="static">
        <Toolbar>
          <Typography
            variant="h2"
            
            style={{ marginLeft: "650px" }}
          >
            Home
          </Typography>
          <Button
              color="secondary"
              variant="contained"
            style={{ marginLeft: "480px" }}
            color="secondary"
            onClick={handleClickOpen}
          >
            Login
          </Button>
          <Button
              color="secondary"
              variant="contained"
            style={{ marginLeft: "20px"}}
            onClick={handleReg}
          >
            Register
          </Button>
        </Toolbar>
      </AppBar>

      <Button

        variant="contained"
        color="secondary"
        style={{ marginLeft: "1350px",marginBlock:"10px" }}
        onClick={handleAdd}
      >
        Add Blogs 
      </Button>
      <Login handleClose={handleClose} open={open} error={error} setError={setError}/>
       <Real  />

      <Add
        handleAddClose={handleAddClose}
        add={add}
        setSubmit={setSubmit}
        setAdded={setAdded}
        getData={getData}
        error={error}
        setError={setError}
      />
      {/* <Register reg={reg} handleRegClose={handleRegClose} /> */}
   
  
    

    </div>
  );
};

export default Blogspot;
----------------------------------Add.js----------------------------
import {
  Dialog,
  DialogTitle,
  Grid,
  FormControl,
  Checkbox,
  Box,
  FormControlLabel,
  Typography,
  RadioGroup,
  Radio,
  FormLabel,
} from "@material-ui/core";
import React, { useState, useContext, useEffect } from "react";
import {
  TextField,
  Button,
  DialogActions,
  DialogContent,
} from "@material-ui/core";
import axios from "axios";
import { Context } from "./App";
import CloseIcon from "@material-ui/icons/Close";
import { IconButton } from "@material-ui/core";

const Add = (props) => {
  const { getData, error, setError } = props;

  
  const [input, setInput] = useState({});
  const [categ, setCateg] = useState([]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    if (name === "categoryId") {
      setInput((prevState) => ({
        ...prevState,
        [name]: parseInt(value),
      }));
    } else {
      setInput((prevState) => ({
        ...prevState,
        [name]: value,
      }));
    }
  };
  const addData = () => {
    if (
      !input?.userId ||
      !input?.blogTitle ||
      !input?.blogContent ||
      !input?.categoryId
    ) {
      setError(true);
    } else {
      axios
        .post(`http://localhost:8080/api/users/create-blog`, input)
        .then(() => {
          getData();
          props.handleAddClose();
          setInput({});
        });
    }
  };

  useEffect(() => {
    addCategory();
  }, []);

  const addCategory = () => {
    axios
      .get(`http://localhost:8080/api/users/getTags`)
      .then((res) => setCateg(res.data));
  };

  //   console.log(byCategory)
  // const byCategory = categ.sort((a,b)=>{
  //   if(a.category > b.category){
  //     return 1;
  //   }
  // else if(b.category > a.category){
  //   return -1;
  // }else{
  //   return 0;
  // }
  // })

  return (
    <>
      <Dialog open={props.add} close={props.handleAddClose}>
        <DialogContent>
          <IconButton style={{ marginLeft: "500px" }}  color="secondary" onClick={props.handleAddClose}>
            <CloseIcon />
          </IconButton>
          <DialogTitle>Add Blog</DialogTitle>

          <Grid container spacing={1}>
            <Grid item xs={12} sm={6}>
              <TextField
                name="userId"
                label="userId"
                type="text"
                value={input?.userId || ""}
                onChange={handleInputChange}
                error={error && !input?.userId}
                fullWidth
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                name="blogTitle"
                label="BlogTitle"
                type="text"
                value={input?.blogTitle || ""}
                onChange={handleInputChange}
                error={error && !input?.blogTitle}
                fullWidth
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                name="blogContent"
                label="BlogContent"
                type="text"
                value={input?.blogContent}
                onChange={handleInputChange}
                error={error && !input?.blogContent}
                fullWidth
              />
            </Grid>
            {/* <Grid item xs={12} sm={6}>
              <TextField
                name="categoryId"
                label="categoryId"
                type="text"
                value={input?.categoryId}
                error={error && input?.categoryId?.length===0}
                onChange={handleInputChange}
                required
                fullWidth
              />
            </Grid> */}

            {/* <Grid item xs={12} sm={12}>
              {categ.map((i) => {
                   console.log(i)
                return <>
                <h1>{i?.category}</h1>
                </>;
              })}
            </Grid>  */}

            {/* <Box>
              <Typography>Click Only one Category</Typography>
              {categ.length>0 && categ.map((i) => {
                   
                return  (<>
                  <FormControlLabel
                    control={<Checkbox  onChange={e=>handleCategoryChange(e)} />}
                    label={i?.category}
                   name={i?.category}
                     value={true}
                   
                    checked={categ[i.category] }
                   
                  />
                  </>
                );
              })}
         
            </Box> */}
            <Grid item xs={12} sm={12}>
              <FormControl>
                <FormLabel id="demo-row-radio-buttons-group-label">
                  Click Only one Category
                </FormLabel>
                {categ?.length > 0 &&
                  categ.map((data) => {
                    return (
                      <RadioGroup
                        row
                        value={input.categoryId ? input.categoryId : 0}
                        name="categoryId"
                        onChange={(e) => handleInputChange(e)}
                        error={error && !input?.categoryId}
                      >
                        <FormControlLabel
                          control={<Radio />}
                          value={data?.individualCategoryId}
                          label={data?.category}
                        />
                      </RadioGroup>
                    );
                  })}
              </FormControl>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button
            type="submit"
            variant="contained"
            color="secondary"
            onClick={addData}
          >
            Add
          </Button>

          <Button
            onClick={props.handleAddClose}
            variant="contained"
            color="secondary"
          >
            Close
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default Add;


---------------------------Pos.js---------------------------
import React, { useState, useEffect, useContext } from "react";
import { useParams } from "react-router";

import Batman from "./Batman.jpg";
import {
  Paper,
  Typography,
  Grid,
  Card,
  Button,
  Dialog,
  DialogActions,
  TextField,
  DialogTitle,
  DialogContent,
  makeStyles,
  Chip,
} from "@material-ui/core";
import { Context } from "./App";
import axios from "axios";
import { useNavigate } from "react-router";
import CloseIcon from "@material-ui/icons/Close";
import { IconButton } from "@material-ui/core";
import Fire from "./fire.jpg";

const useStyles = makeStyles({
  newAppBtn: {
    background: "blueviolet",
    color: "white",
    textTransform: "none",
  },
});

const Pos = ({ getData }) => {
  const [data] = useContext(Context);
  const classes = useStyles();
  const navigate = useNavigate();

  const { individualBlogId } = useParams();
  const [edit, setEdit] = useState(false);

  const [bag, setBag] = useState();
  const [update, setUpdate] = useState();
  const [use, setUse] = useState();
  const [comment, setComment] = useState({});
  const [del, setDel] = useState(false);
  const [cdata, setCdata] = useState(null);
  const [error, setError] = useState(false);
  console.log(error);
  const handleComment = (e) => {
    const { value } = e.target;
    setComment(value);
  };

  const handleUpdate = (e) => {
    const { name, value } = e.target;

    setUse((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  const handleDel = () => {
    setDel(true);
  };
  const handleDelClose = () => {
    setDel(false);
  };

  const handleEdit = () => {
    setEdit(true);
    setUse(update);
  };
  const handleEditClose = () => {
    setEdit(false);
  };

  useEffect(() => {
    const selectedData = data.filter(
      (data) => data.individualBlogId == individualBlogId
    );

    setBag(selectedData);
  }, [individualBlogId]);

  useEffect(() => {
    singleBlog();
  }, []);

  useEffect(() => {
    commentData();
  }, []);

  const singleBlog = () => {
    axios
      .get(`http://localhost:8080/api/users/singleblog/${individualBlogId}`)
      .then((res) => setUpdate(res.data));
  };

  const deleteData = () => {
    axios
      .delete(`http://localhost:8080/api/users/delete-blog/${individualBlogId}`)
      .then(() => {
        getData();
        navigate("/");
      });
  };

  const UpdateData = () => {
    if (!use?.categoryId || !use?.blogTitle || !use?.blogContent) {
      setError(true);
    } else {
      axios
        .put(
          `http://localhost:8080/api/users/update-blog/${individualBlogId}`,
          use
        )
        .then(() => {
          singleBlog();
        });
      handleEditClose();
    }
  };

  const createComment = () => {
    if (comment?.comments === "") {
      setError(true);
    } else {
      axios
        .post(`http://localhost:8080/api/users/create-comment/`, {
          userId: update?.userId,
          blogId: update?.individualBlogId,
          userComment: comment,
        })
        .then(() => {
          commentData();
          setComment({ comments: "" });
        });
    }
  };

  const commentData = () => {
    axios
      .get(`http://localhost:8080/api/users/blog-comments/${individualBlogId}`)
      .then((res) => {
        setCdata(res.data);
      });
  };

  return (
    <div>
      {bag && (
        <Paper
          spacing={2}
          style={{
            backgroundImage: `url(${Fire})`,
            backgroundRepeat: "no-repeat",
            backgroundSize: "2000px",
          }}
        >
          {/* <Grid item sm={10} xs={12} contianer>
            <Card style={{ marginLeft: "200px", CellSpacing: "5" }}>
            */}
          <Button
            style={{ marginLeft: "850px" }}
            color="secondary"
            variant="contained"
            className={classes.newAppBtn}
            onClick={handleEdit}
          >
            Edit
          </Button>
          <Button
            style={{ marginLeft: "20px" }}
            className={classes.newAppBtn}
            color="secondary"
            variant="contained"
            //onClick={deleteData}
            onClick={handleDel}
          >
            Delete
          </Button>
          <Typography variant="h3" color="secondary">
            BlogTitle: {update?.blogTitle}
          </Typography>
          <img src={Batman} />

          <Typography>BlogContent: {update?.blogContent}</Typography>
          <Typography>CategoryId: {update?.categoryId}</Typography>
          <Typography>IndividualBlogId:{update?.individualBlogId}</Typography>
          <Typography>UserId:{update?.userId}</Typography>
          <Typography>Name:{update?.user?.name}</Typography>
          <Typography>Email:{update?.user?.email}</Typography>
          <Typography>Password:{update?.user?.password}</Typography>
          <Chip
            className={classes.newAppBtn}
            label={update?.blogTag?.category}
            style={{
              marginLeft: "100px",
            }}
            color="secondary"
            clickable
          />

          <TextField
            label="Comments"
            name="comments"
            value={comment ? comment.comments : ""}
            onChange={handleComment}
            error={error && comment?.comments?.length === 0}
            // style={{width:"80%"}}
            multiline
            rows={3}
            variant="outlined"
          />
          <Typography>
            {cdata?.length > 0 &&
              cdata.map((data) => {
                return (
                  <Typography variant="outlined" multiline rows={4}>
                    {data?.userComment}
                  </Typography>
                );
              })}
          </Typography>

          <Button
            color="secondary"
            variant="contained"
            className={classes.newAppBtn}
            onClick={createComment}
          >
            Commont
          </Button>
          {/* </Card>
          </Grid> */}
        </Paper>
      )}

      <>
        {/* Delte Yes or No  Dialog Box */}
        <Dialog open={del} close={handleDelClose}>
          <DialogContent>
            <DialogTitle>Are You Sure to delete</DialogTitle>
            <Button
              variant="contained"
              color="secondary"
              className={classes.newAppBtn}
              onClick={deleteData}
            >
              Yes
            </Button>
            <Button
              variant="contained"
              color="secondary"
              className={classes.newAppBtn}
              style={{ marginLeft: "120px" }}
              onClick={handleDelClose}
            >
              No
            </Button>
          </DialogContent>
        </Dialog>
      </>
      <>
        {/* Update Blog Dialog box */}
        <Dialog open={edit} close={handleEditClose}>
          <DialogContent>
            <IconButton
              color="secondary"
              style={{ marginLeft: "500px" }}
              onClick={handleEditClose}
            >
              <CloseIcon />
            </IconButton>
            <DialogTitle>Update Blog</DialogTitle>

            <Grid container spacing={1}>
              <Grid item xs={12} sm={6}>
                <TextField
                  name="categoryId"
                  label="categoryId"
                  value={use?.categoryId}
                  type="text"
                  onChange={handleUpdate}
                  error={error && use?.categoryId?.length === 0}
                  fullWidth
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  name="blogTitle"
                  value={use?.blogTitle}
                  label="BlogTitle"
                  type="text"
                  onChange={handleUpdate}
                  error={error && use?.blogTitle?.length === 0}
                  fullWidth
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  name="blogContent"
                  value={use?.blogContent}
                  error={error && use?.blogContent?.length === 0}
                  label="BlogContent"
                  type="text"
                  onChange={handleUpdate}
                  fullWidth
                />
              </Grid>
            </Grid>
          </DialogContent>
          <DialogActions>
            <Button
              variant="contained"
              color="secondary"
              className={classes.newAppBtn}
              onClick={UpdateData}
            >
              Update
            </Button>

            <Button
              className={classes.newAppBtn}
              onClick={handleEditClose}
              variant="contained"
              color="secondary"
            >
              Close
            </Button>
          </DialogActions>
        </Dialog>
      </>
    </div>
  );
};

export default Pos;


-------------------------------Login.js----------------------
import React, { useContext } from "react";
import { Button, Grid } from "@material-ui/core";
import TextField from "@material-ui/core/TextField";
import Dialog from "@material-ui/core/Dialog";
import { DialogTitle, DialogActions } from "@material-ui/core";
import { useState } from "react";
import CloseIcon from "@material-ui/icons/Close";
import { IconButton } from "@material-ui/core";

const Login = (props) => {
  const { error, setError } = props;
  const [insert, setInsert] = useState({ emailid: "", password: "" });

  const handleText = (e) => {
    const { name, value } = e.target;
    setInsert((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  return (
    <div>
      <Dialog open={props.open} onClose={props.handleC}>
        <IconButton
          color="secondary"
          onClick={props.handleClose}
          style={{ marginLeft: "500px" }}
        >
          <CloseIcon />
        </IconButton>
        <DialogTitle id="form-dialog-title">User login</DialogTitle>
        <Grid container>
          <Grid item sm={5} xs={12} style={{ marginLeft: "40px" }}>
            <TextField
              autoComplete="new-password"
              name="emailid"
              value={insert?.emailid}
              onChange={handleText}
              label="Email Id"
              type="email"
              fullWidth
            />
          </Grid>

          <Grid item sm={5} xs={12} style={{ marginLeft: "20px" }}>
            <TextField
              name="password"
              value={insert?.password}
              onChange={handleText}
              label="Password"
              type="password"
              fullWidth
              inputProps={{
                autocomplete: "new-password",
                form: {
                  autocomplete: "off",
                },
              }}
            />
          </Grid>
        </Grid>
        <DialogActions>
          <Button
            color="secondary"
            variant="outlined"
            onClick={props.handleClose}
          >
            Login
          </Button>

          <Button
            color="secondary"
            variant="outlined"
            onClick={props.handleClose}
          >
            LogOut
          </Button>
        </DialogActions>
      </Dialog>
    </div>
  );
};

export default Login;

----------------------Pagination.js--------------------
import React, { useState } from "react";

function usePagination(data, PerPage,filtered) {
  const [currentPage, setCurrentPage] = useState(1);
  const maxPage = Math.ceil(data.length / PerPage);


    function currentData() {
    const begin = (currentPage - 1) * PerPage;
    const end = begin + PerPage;
    return data.slice(begin, end);
    

  }

  

  function next() {
    setCurrentPage(currentPage => Math.min(currentPage + 1, maxPage));
  }

  function prev() {
    setCurrentPage(currentPage => Math.max(currentPage - 1, 1));
  }

  function jump(page) {
    const pageNumber = Math.max(1, page);
    setCurrentPage(currentPage => Math.min(pageNumber, maxPage));
  }

   return { next,prev,jump, currentData, currentPage, maxPage };
 }

export default usePagination;
